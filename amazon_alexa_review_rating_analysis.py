# -*- coding: utf-8 -*-
"""amazon-alexa-review-rating-analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vosA_DWVWjA9FN5SxSkOiRbdnDXWtLIf

Steven Jonathan
"""

import pandas as pd

fpath = '/content/amazon_alexa.tsv'
df = pd.read_csv(fpath,sep='\t') #read the dataset
df.shape

df.head() #check the dataset

df = df.drop(columns=['date', 'variation', 'feedback']) #drop unimportant part of the analysis

columns_titles = ["verified_reviews","rating"]
df=df.reindex(columns=columns_titles) #switch the rating columns with verified reviews, for better analysis
df.head()

rating = pd.get_dummies(df.rating)
new_df = pd.concat([df, rating], axis=1)
new_df  = new_df.drop(columns='rating')
new_df #one-hot-encoding, and created new dataframe

verified_reviews = new_df['verified_reviews'].values
label = new_df[[1,2,3,4,5]].values

from sklearn.model_selection import train_test_split
verified_reviews_train, verified_reviews_test, label_train, label_test = train_test_split(verified_reviews, label, test_size=0.2)

from tensorflow.keras.preprocessing.text import Tokenizer
from tensorflow.keras.preprocessing.sequence import pad_sequences
 
tokenizer = Tokenizer(num_words=5000, oov_token='x')
tokenizer.fit_on_texts(verified_reviews_train) 
tokenizer.fit_on_texts(verified_reviews_test)
 
sekuens_train = tokenizer.texts_to_sequences(verified_reviews_train)
sekuens_test = tokenizer.texts_to_sequences(verified_reviews_test)
 
padded_train = pad_sequences(sekuens_train) 
padded_test = pad_sequences(sekuens_test)

import tensorflow as tf
model = tf.keras.Sequential([
    tf.keras.layers.Embedding(input_dim=5000, output_dim=16),
    tf.keras.layers.LSTM(64),
    tf.keras.layers.Dense(128, activation='relu'),
    tf.keras.layers.Dense(64, activation='relu'),
    tf.keras.layers.Dense(5, activation='softmax')
])
model.compile(loss='categorical_crossentropy',optimizer='adam',metrics=['accuracy'])

class myCallback(tf.keras.callbacks.Callback):
  def on_epoch_end(self, epoch, logs={}):
    if(logs.get('accuracy')>0.9):
      print("\nAkurasi telah mencapai >90%!")
      self.model.stop_training = True
callbacks = myCallback()

num_epochs = 30
history = model.fit(padded_train, label_train, epochs=num_epochs, validation_data=(padded_test, label_test), callbacks=[callbacks])